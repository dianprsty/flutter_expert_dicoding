// Mocks generated by Mockito 5.4.6 from annotations
// in ditonton/test/presentation/pages/watchlist_movies_page_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;
import 'dart:ui' as _i9;

import 'package:ditonton/common/state_enum.dart' as _i6;
import 'package:ditonton/domain/entities/movie.dart' as _i5;
import 'package:ditonton/domain/entities/tv_series.dart' as _i11;
import 'package:ditonton/domain/usecases/movies/get_watchlist_movies.dart'
    as _i2;
import 'package:ditonton/domain/usecases/tv_series/get_watchlist_tv_series.dart'
    as _i3;
import 'package:ditonton/presentation/provider/movie/watchlist_movie_notifier.dart'
    as _i4;
import 'package:ditonton/presentation/provider/tv_series/watchlist_tv_series_notifier.dart'
    as _i10;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeGetWatchlistMovies_0 extends _i1.SmartFake
    implements _i2.GetWatchlistMovies {
  _FakeGetWatchlistMovies_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeGetWatchlistTvSeries_1 extends _i1.SmartFake
    implements _i3.GetWatchlistTvSeries {
  _FakeGetWatchlistTvSeries_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [WatchlistMovieNotifier].
///
/// See the documentation for Mockito's code generation for more information.
class MockWatchlistMovieNotifier extends _i1.Mock
    implements _i4.WatchlistMovieNotifier {
  MockWatchlistMovieNotifier() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GetWatchlistMovies get getWatchlistMovies =>
      (super.noSuchMethod(
            Invocation.getter(#getWatchlistMovies),
            returnValue: _FakeGetWatchlistMovies_0(
              this,
              Invocation.getter(#getWatchlistMovies),
            ),
          )
          as _i2.GetWatchlistMovies);

  @override
  List<_i5.Movie> get watchlistMovies =>
      (super.noSuchMethod(
            Invocation.getter(#watchlistMovies),
            returnValue: <_i5.Movie>[],
          )
          as List<_i5.Movie>);

  @override
  _i6.RequestState get watchlistState =>
      (super.noSuchMethod(
            Invocation.getter(#watchlistState),
            returnValue: _i6.RequestState.Empty,
          )
          as _i6.RequestState);

  @override
  String get message =>
      (super.noSuchMethod(
            Invocation.getter(#message),
            returnValue: _i7.dummyValue<String>(
              this,
              Invocation.getter(#message),
            ),
          )
          as String);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  _i8.Future<void> fetchWatchlistMovies() =>
      (super.noSuchMethod(
            Invocation.method(#fetchWatchlistMovies, []),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  void addListener(_i9.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i9.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [WatchlistTvSeriesNotifier].
///
/// See the documentation for Mockito's code generation for more information.
class MockWatchlistTvSeriesNotifier extends _i1.Mock
    implements _i10.WatchlistTvSeriesNotifier {
  MockWatchlistTvSeriesNotifier() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.GetWatchlistTvSeries get getWatchlistTvSeries =>
      (super.noSuchMethod(
            Invocation.getter(#getWatchlistTvSeries),
            returnValue: _FakeGetWatchlistTvSeries_1(
              this,
              Invocation.getter(#getWatchlistTvSeries),
            ),
          )
          as _i3.GetWatchlistTvSeries);

  @override
  List<_i11.TvSeries> get watchlistTvSeries =>
      (super.noSuchMethod(
            Invocation.getter(#watchlistTvSeries),
            returnValue: <_i11.TvSeries>[],
          )
          as List<_i11.TvSeries>);

  @override
  _i6.RequestState get watchlistState =>
      (super.noSuchMethod(
            Invocation.getter(#watchlistState),
            returnValue: _i6.RequestState.Empty,
          )
          as _i6.RequestState);

  @override
  String get message =>
      (super.noSuchMethod(
            Invocation.getter(#message),
            returnValue: _i7.dummyValue<String>(
              this,
              Invocation.getter(#message),
            ),
          )
          as String);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  _i8.Future<void> fetchWatchlistTvSeries() =>
      (super.noSuchMethod(
            Invocation.method(#fetchWatchlistTvSeries, []),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  void addListener(_i9.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i9.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}
